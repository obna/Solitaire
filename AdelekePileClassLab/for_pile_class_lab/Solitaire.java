package for_pile_class_lab;// Omoremi Adeleke// 27 November 2018import java.awt.*;import java.awt.event.*;import javax.swing.*;public class Solitaire extends JFrame {// just gui	// a standard deck of cards	private Deck myDeck;	// simulates a pile of cards	private SolitairePile myPile;	// refers to an array of card buttons	// to remove cards from pile	private JButton cButton[][];// array of array of JButtons	// button for dealing a card to the pile	private JButton dealB;	// button for checking winning configuration	private JButton winningConfigB;	// layered pane that can hold 14 card buttons	private JLayeredPane myLPs[];// array of LPs	// where messages to the user are displayed	private JTextField messageTF;	// reference to content pane of the JFrame	private Container myCP;	private boolean handlingSecondClick;	private int firstPileNumber;	private Tableau myTableau;	public Solitaire() {		super("Aces Up");		setSize(350, 600);		myDeck = new Deck();		myDeck.shuffle();		myCP = getContentPane();		myCP.setBackground(Color.cyan);		myCP.setLayout(null);		//		 construct JLayeredPane first		myLPs = new JLayeredPane[4];		for (int i = 0; i < 4; i++) {			myLPs[i] = new JLayeredPane();			myLPs[i].setLayout(null);			myLPs[i].setLocation(20 + 80 * i, 10);// i = 0 x = 20; i = 1 20+80=100;			myLPs[i].setSize(50, 400);			myCP.add(myLPs[i]);		}		// construct array of 14 buttons for the layered pane		// bottom button used to indicate a pile when the pile is empty		// top 13 buttons indicate cards in each pile		cButton = new JButton[4][14];// cButton points to an array of 4 arrays of 14 JButtons		for (int j = 0; j < 4; j++) {						CardBHandler cBH = new CardBHandler(j);// one handler all 14 buttons j so Pile constr can know which pile			for (int i = 0; i < 14; i++) {				cButton[j][i] = new JButton("");				cButton[j][i].setLocation(0, 25 * i);				cButton[j][i].setSize(49, 71);				cButton[j][i].setIcon(null);				cButton[j][i].addActionListener(cBH);			} // for 14 buttons			cButton[j][0].setLocation(0, 25);// button for empty pile will be under button for first card			myLPs[j].add(cButton[j][0], 0); //for any pile of j add empty pile add empty pile button to layered pane		} // for 4 sets of buttons		myTableau = new Tableau(myLPs, cButton);		dealB = new JButton("Deal 4 Cards");		dealB.setLocation(10, 440);		dealB.setSize(105, 30);		dealB.addActionListener(new DealBHandler());		myCP.add(dealB);		winningConfigB = new JButton("Winning Configuration");		winningConfigB.setLocation(110, 440);		winningConfigB.setSize(190, 30);		winningConfigB.addActionListener(new WinningConfigBHandler());		myCP.add(winningConfigB);		messageTF = new JTextField();		messageTF.setLocation(10, 500);		messageTF.setSize(300, 50);		messageTF.setEditable(false);		myCP.add(messageTF);		handlingSecondClick = false;		// construct a pile of cards		// the pile needs a reference to its		// layered pane and its array of buttons		//		myPile = new SolitairePile(myLPs, cButton);		setVisible(true);		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent e) {				System.exit(0);			}// windowClosing		}); // end of definition of WindowAdapter and semicolon to end the line	} // constructor	public class DealBHandler implements ActionListener {		private int myPileNumber;		public void actionPerformed(ActionEvent e) {			if(!(handlingSecondClick)) {				if (myTableau.enoughCardsToDeal()) {					myTableau.dealFourCards();					messageTF.setText("Four cards dealt.");				}//enough cards to deal			} else {				messageTF.setText("There are no cards left in the deck.");				dealB.setEnabled(false);			} // else			} // actionPerformed	} // DealBHandler	public class CardBHandler implements ActionListener {		private int myPileNumber;		public CardBHandler (int thePileNumber) {			myPileNumber = thePileNumber;						}// constr for CardBaHandlr //if one click is in same pile remove //	if one click is diff		public void actionPerformed(ActionEvent e) {			if(handlingSecondClick){				handlingSecondClick = false;				if(firstPileNumber == myPileNumber) {					if(myTableau.okayToRemove(myPileNumber)) {						myTableau.removeTopCardofPile(myPileNumber);						messageTF.setText("1 card has been removed");					}else {						messageTF.setText("INVALID MOVE SUCKA");					}//else				}else {					if(myTableau.okayMoveFromTo(firstPileNumber, myPileNumber)) {						myTableau.moveFromTo(firstPileNumber, myPileNumber);						messageTF.setText("One card has been moved");					}else {						messageTF.setText("INVALID MOVE CONGRATULATIONS YOU PLAYED YA SELF");					}//else				}//else			}else {				firstPileNumber= myPileNumber;				handlingSecondClick = true;			}//else for was it the second click		} // actionPerformed	} // CardBHandler	public class WinningConfigBHandler implements ActionListener {		public void disableAllCardButtons(){			for (int j = 0; j < 4; j++) {							for (int i = 0; i < 14; i++) {					cButton[j][i].setEnabled(false);					cButton[j][i].setIcon(CardWithImage.cardBackImage);						//myImage = new ImageIcon("images" + sep + theRank + theSuit + ".gif");				}//for i			}//for j					}//disableAllCardButtons		public void actionPerformed(ActionEvent e) {			if((handlingSecondClick)) {				messageTF.setText("Finish the move or remove card action");			}else {				dealB.setEnabled(false);				winningConfigB.setEnabled(false);				disableAllCardButtons();			}			if(myTableau.acesOnlyInPilesDeckEmpty()) {				messageTF.setText("Winner Winner Chicken Dinner");			}else {				messageTF.setText("Loser Loser Bruiser Dozer");			}		}//actionPerformed	}//WinningBHandler	public static void main(String args[]) {		Solitaire myAppF = new Solitaire();	}// main} // PileClassLab